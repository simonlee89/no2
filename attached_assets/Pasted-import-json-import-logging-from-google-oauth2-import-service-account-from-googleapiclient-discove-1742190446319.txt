import json
import logging
from google.oauth2 import service_account
from googleapiclient.discovery import build
from config import SPREADSHEET_ID, RANGE_NAME, GOOGLE_CREDENTIALS

def get_sheets_service():
    try:
        if isinstance(GOOGLE_CREDENTIALS, str):
            try:
                credentials_info = json.loads(GOOGLE_CREDENTIALS)
            except json.JSONDecodeError as e:
                logging.error(f"Failed to parse GOOGLE_CREDENTIALS as JSON: {e}")
                raise
        else:
            credentials_info = GOOGLE_CREDENTIALS

        credentials = service_account.Credentials.from_service_account_info(
            credentials_info,
            scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']
        )

        service = build('sheets', 'v4', credentials=credentials)
        return service
    except Exception as e:
        logging.error(f"Failed to create sheets service: {str(e)}")
        raise

def determine_status(q_value, r_value):
    """
    Q열과 R열의 값을 받아, '공클' 또는 '온하'가 포함되어 있으면 해당 상태를,
    둘 다 없으면 '갠매'로 분류합니다.
    """
    q_status = q_value.strip() if q_value else ''
    r_status = r_value.strip() if r_value else ''

    # '공클'과 '온하'가 있는 경우 해당 상태 우선 적용
    if '공클' in q_status or '공클' in r_status:
        return '공클'
    elif '온하' in q_status or '온하' in r_status:
        return '온하'
    else:
        # 공클, 온하 둘 다 없으면 갠매로 분류
        return '갠매'

def get_property_data():
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()

        logging.debug(f"Attempting to fetch data with range: {RANGE_NAME}")
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME
        ).execute()

        values = result.get('values', [])
        if not values:
            logging.warning("No data found in spreadsheet")
            return []

        properties = []
        status_counts = {
            '갠매': 0,
            '온하': 0,
            '공클': 0
        }

        # 데이터가 5행부터 시작한다고 가정 (인덱스 5부터 번호 부여)
        for index, row in enumerate(values, start=5):
            try:
                # A열 (index 0), P열 (index 15), Q열 (index 16), R열 (index 17)
                if len(row) < 18:
                    logging.warning(f"Row {index} has insufficient columns: {len(row)}")
                    continue

                property_id = row[0].strip() if row[0] else ''
                location = row[15].strip() if row[15] else ''
                q_status = row[16]  # Q열 값
                r_status = row[17]  # R열 값

                if not property_id or not location:
                    continue

                hyperlink = f"https://new.land.naver.com/houses?articleNo={property_id}"

                logging.debug(f"Row {index} - Processing property:")
                logging.debug(f"  Property ID: {property_id}")
                logging.debug(f"  Location: {location}")
                logging.debug(f"  Q열 원본 값: '{q_status}'")
                logging.debug(f"  R열 원본 값: '{r_status}'")

                status = determine_status(q_status, r_status)
                status_counts[status] += 1

                logging.debug(f"  -> Final status: {status}")

                property_data = {
                    'id': property_id,
                    'hyperlink': hyperlink,
                    'location': location,
                    'status': status
                }

                logging.debug(f"  Final property data: {json.dumps(property_data, indent=2, ensure_ascii=False)}")
                properties.append(property_data)
            except Exception as row_error:
                logging.error(f"Error processing row {index}: {str(row_error)}")
                continue

        logging.info(f"Total properties processed: {len(properties)}")
        logging.info(f"Status counts: {json.dumps(status_counts, ensure_ascii=False, indent=2)}")
        logging.info(f"Target counts:")
        logging.info(f"  갠매: 579개 (현재: {status_counts['갠매']}개)")
        logging.info(f"  온하: 403개 (현재: {status_counts['온하']}개)")
        logging.info(f"  공클: 692개 (현재: {status_counts['공클']}개)")

        return properties
    except Exception as e:
        logging.error(f"Failed to fetch property data: {str(e)}")
        return []
